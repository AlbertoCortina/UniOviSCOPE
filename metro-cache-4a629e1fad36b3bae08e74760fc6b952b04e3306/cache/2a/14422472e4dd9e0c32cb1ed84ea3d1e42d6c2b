__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.checkAuthenticationAction = checkAuthenticationAction;

    var _reactNative = _require(_dependencyMap[0], "react-native");

    function permit(token) {
        return {
            type: 'PERMIT',
            value: token
        };
    }

    function deny() {
        return {
            type: 'DENY'
        };
    }

    function checkAuthenticationAction() {
        return function (dispatch) {
            getAuthorizationToken().then(function (token) {
                if (token !== null) {
                    dispatch(permit(token));
                } else {
                    dispatch(deny());
                }
            }).catch(function (error) {
                console.error('Error obteniendo el token de autorización');
            });
        };
    }

    function getAuthorizationToken() {
        return regeneratorRuntime.async(function getAuthorizationToken$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('AUTHORIZATION'));

                    case 3:
                        return _context.abrupt("return", _context.sent);

                    case 6:
                        _context.prev = 6;
                        _context.t0 = _context["catch"](0);
                        console.error('Error obteniendo el token de autorización');

                    case 9:
                    case "end":
                        return _context.stop();
                }
            }
        }, null, this, [[0, 6]]);
    }
});