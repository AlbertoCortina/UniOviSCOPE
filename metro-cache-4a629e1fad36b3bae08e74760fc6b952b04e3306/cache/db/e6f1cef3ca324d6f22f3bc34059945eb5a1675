__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.checkAuthenticationAction = checkAuthenticationAction;

    var _reactNative = _require(_dependencyMap[0], "react-native");

    var _ = _require(_dependencyMap[1], "./");

    var _util = _require(_dependencyMap[2], "../util");

    function checkAuthenticationAction() {
        console.log('Entra a: checkAuthentication-action');
        return function (dispatch) {
            _reactNative.AsyncStorage.clear().then(function () {
                dispatch({
                    type: 'NOT_AUTHENTICATED'
                });
            });

            var token = void 0;
            var username = void 0;
            dispatch((0, _.loading)());

            _reactNative.NetInfo.isConnected.fetch().then(function (isConnected) {
                if (isConnected) {
                    getAuthorizationToken().then(function (tokenResponse) {
                        token = tokenResponse;

                        if (token !== null && token !== undefined) {
                            return getUsername();
                        } else {
                            throw 'NO_TOKEN';
                        }
                    }).then(function (usernameResponse) {
                        username = usernameResponse;

                        if (username !== null) {
                            return makingFindUserDetailsRequest(username, token, dispatch);
                        } else {
                            throw 'NO_USERNAME';
                        }
                    }).then(function (response) {
                        idStudent = response.id;
                        dni = response.dni;
                        firstNameAndLastName = response.firstName + ' ' + response.lastName;
                        email = username + '@uniovi.es';
                        dispatch((0, _.authenticate)(token, username, idStudent, dni, firstNameAndLastName, email));
                    }).catch(function (error) {
                        if (error === 'NO_TOKEN' || error === 'NO_USERNAME') {
                            dispatch((0, _.dontAuthenticate)());
                        } else {
                            rollback(dispatch);
                        }
                    });
                } else {
                    dispatch((0, _.noConnectionError)());
                }
            }).catch(function (error) {
                rollback(dispatch);
            });
        };
    }

    function getAuthorizationToken() {
        return regeneratorRuntime.async(function getAuthorizationToken$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('AUTHORIZATION'));

                    case 3:
                        return _context.abrupt("return", _context.sent);

                    case 6:
                        _context.prev = 6;
                        _context.t0 = _context["catch"](0);
                        return _context.abrupt("return", null);

                    case 10:
                    case "end":
                        return _context.stop();
                }
            }
        }, null, this, [[0, 6]]);
    }

    function getUsername() {
        return regeneratorRuntime.async(function getUsername$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('USERNAME'));

                    case 3:
                        return _context2.abrupt("return", _context2.sent);

                    case 6:
                        _context2.prev = 6;
                        _context2.t0 = _context2["catch"](0);
                        return _context2.abrupt("return", null);

                    case 10:
                    case "end":
                        return _context2.stop();
                }
            }
        }, null, this, [[0, 6]]);
    }

    function makingFindUserDetailsRequest(username, token, dispatch) {
        var response;
        return regeneratorRuntime.async(function makingFindUserDetailsRequest$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.prev = 0;
                        _context3.next = 3;
                        return regeneratorRuntime.awrap(fetch(_util.API_URL + '/common/findUserDetails?userName=' + username, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': token
                            }
                        }));

                    case 3:
                        response = _context3.sent;
                        _context3.next = 6;
                        return regeneratorRuntime.awrap(response.json());

                    case 6:
                        return _context3.abrupt("return", _context3.sent);

                    case 9:
                        _context3.prev = 9;
                        _context3.t0 = _context3["catch"](0);
                        return _context3.abrupt("return", null);

                    case 12:
                    case "end":
                        return _context3.stop();
                }
            }
        }, null, this, [[0, 9]]);
    }

    function rollback(dispatch) {
        setAuthorizationToken(null).then(function () {
            setUsername(null).then(function () {
                dispatch((0, _.unknownError)());
            });
        });
    }

    function setAuthorizationToken(token) {
        return regeneratorRuntime.async(function setAuthorizationToken$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        _context4.prev = 0;
                        _context4.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.removeItem('AUTHORIZATION', function () {
                            _reactNative.AsyncStorage.setItem('AUTHORIZATION', token);
                        }));

                    case 3:
                        return _context4.abrupt("return", _context4.sent);

                    case 6:
                        _context4.prev = 6;
                        _context4.t0 = _context4["catch"](0);
                        console.log('Error guardando el token de autorizaci√≥n en: login-action');

                    case 9:
                    case "end":
                        return _context4.stop();
                }
            }
        }, null, this, [[0, 6]]);
    }

    function setUsername(username) {
        return regeneratorRuntime.async(function setUsername$(_context5) {
            while (1) {
                switch (_context5.prev = _context5.next) {
                    case 0:
                        _context5.prev = 0;
                        _context5.next = 3;
                        return regeneratorRuntime.awrap(_reactNative.AsyncStorage.removeItem('USERNAME', function () {
                            _reactNative.AsyncStorage.setItem('USERNAME', username);
                        }));

                    case 3:
                        return _context5.abrupt("return", _context5.sent);

                    case 6:
                        _context5.prev = 6;
                        _context5.t0 = _context5["catch"](0);
                        console.log('Error guardando el nombre de usuario en: login-action');

                    case 9:
                    case "end":
                        return _context5.stop();
                }
            }
        }, null, this, [[0, 6]]);
    }
});