__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/alberto/Git/UniOviSCOPE/node_modules/react-navigation/src/navigators/createNavigator.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactLifecyclesCompat = _require(_dependencyMap[2], "react-lifecycles-compat");

  var _getChildEventSubscriber = _require(_dependencyMap[3], "../getChildEventSubscriber");

  var _getChildEventSubscriber2 = _interopRequireDefault(_getChildEventSubscriber);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Navigator: {
      displayName: "Navigator",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/alberto/Git/UniOviSCOPE/node_modules/react-navigation/src/navigators/createNavigator.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  function createNavigator(NavigatorView, router, navigationConfig) {
    var _class, _temp;

    var Navigator = _wrapComponent("Navigator")((_temp = _class = function (_React$Component) {
      _inherits(Navigator, _React$Component);

      function Navigator(props) {
        _classCallCheck(this, Navigator);

        var _this = _possibleConstructorReturn(this, (Navigator.__proto__ || Object.getPrototypeOf(Navigator)).call(this, props));

        _this._isRouteFocused = function (route) {
          var state = _this.props.navigation.state;
          var focusedRoute = state.routes[state.index];
          return route === focusedRoute;
        };

        _this._dangerouslyGetParent = function () {
          return _this.props.navigation;
        };

        _this.state = {
          descriptors: {},
          childEventSubscribers: {},
          screenProps: props.screenProps
        };
        return _this;
      }

      _createClass(Navigator, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var activeKeys = this.props.navigation.state.routes.map(function (r) {
            return r.key;
          });

          var childEventSubscribers = _extends({}, this.state.childEventSubscribers);

          Object.keys(childEventSubscribers).forEach(function (key) {
            if (!activeKeys.includes(key)) {
              delete childEventSubscribers[key];
            }
          });

          if (childEventSubscribers.length !== this.state.childEventSubscribers.length) {
            this.setState({
              childEventSubscribers: childEventSubscribers
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;

          var descriptors = _extends({}, this.state.descriptors);

          Object.values(descriptors).forEach(function (descriptor) {
            descriptor.navigation.isFocused = function () {
              return _this2._isRouteFocused(descriptor.state);
            };

            descriptor.navigation.dangerouslyGetParent = _this2._dangerouslyGetParent;
          });
          return _react3.default.createElement(NavigatorView, _extends({}, this.props, {
            screenProps: this.props.screenProps,
            navigation: this.props.navigation,
            navigationConfig: navigationConfig,
            descriptors: descriptors,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 139
            }
          }));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          var navigation = nextProps.navigation,
              screenProps = nextProps.screenProps;
          var dispatch = navigation.dispatch,
              state = navigation.state,
              addListener = navigation.addListener;
          var routes = state.routes;

          if (typeof routes === 'undefined') {
            throw new TypeError('No "routes" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop');
          }

          var descriptors = _extends({}, prevState.descriptors);

          var childEventSubscribers = _extends({}, prevState.childEventSubscribers);

          routes.forEach(function (route) {
            if (!descriptors[route.key] || descriptors[route.key].state !== route || screenProps !== prevState.screenProps) {
              var getComponent = function getComponent() {
                return router.getComponentForRouteName(route.routeName);
              };

              if (!childEventSubscribers[route.key]) {
                childEventSubscribers[route.key] = (0, _getChildEventSubscriber2.default)(addListener, route.key);
              }

              var actionCreators = _extends({}, navigation.actions, router.getActionCreators(route, state.key));

              var actionHelpers = {};
              Object.keys(actionCreators).forEach(function (actionName) {
                actionHelpers[actionName] = function () {
                  var actionCreator = actionCreators[actionName];
                  var action = actionCreator.apply(undefined, arguments);
                  return dispatch(action);
                };
              });

              var childNavigation = _extends({}, actionHelpers, {
                actions: actionCreators,
                dispatch: dispatch,
                state: route,
                addListener: childEventSubscribers[route.key].addListener,
                getParam: function getParam(paramName, defaultValue) {
                  var params = route.params;

                  if (params && paramName in params) {
                    return params[paramName];
                  }

                  return defaultValue;
                }
              });

              var options = router.getScreenOptions(childNavigation, screenProps);
              descriptors[route.key] = {
                key: route.key,
                getComponent: getComponent,
                options: options,
                state: route,
                navigation: childNavigation
              };
            }
          });
          return {
            descriptors: descriptors,
            childEventSubscribers: childEventSubscribers,
            screenProps: screenProps
          };
        }
      }]);

      return Navigator;
    }(_react3.default.Component), _class.router = router, _class.navigationOptions = null, _temp));

    return (0, _reactLifecyclesCompat.polyfill)(Navigator);
  }

  exports.default = createNavigator;
});